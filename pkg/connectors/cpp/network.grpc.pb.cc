// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: network.proto

#include "network.pb.h"
#include "network.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace network {

static const char* NetworkExchange_method_names[] = {
  "/network.NetworkExchange/Send",
  "/network.NetworkExchange/Recv",
};

std::unique_ptr< NetworkExchange::Stub> NetworkExchange::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetworkExchange::Stub> stub(new NetworkExchange::Stub(channel, options));
  return stub;
}

NetworkExchange::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Send_(NetworkExchange_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Recv_(NetworkExchange_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientWriter< ::network::PDU>* NetworkExchange::Stub::SendRaw(::grpc::ClientContext* context, ::network::FIN* response) {
  return ::grpc::internal::ClientWriterFactory< ::network::PDU>::Create(channel_.get(), rpcmethod_Send_, context, response);
}

void NetworkExchange::Stub::async::Send(::grpc::ClientContext* context, ::network::FIN* response, ::grpc::ClientWriteReactor< ::network::PDU>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::network::PDU>::Create(stub_->channel_.get(), stub_->rpcmethod_Send_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::network::PDU>* NetworkExchange::Stub::AsyncSendRaw(::grpc::ClientContext* context, ::network::FIN* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::network::PDU>::Create(channel_.get(), cq, rpcmethod_Send_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::network::PDU>* NetworkExchange::Stub::PrepareAsyncSendRaw(::grpc::ClientContext* context, ::network::FIN* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::network::PDU>::Create(channel_.get(), cq, rpcmethod_Send_, context, response, false, nullptr);
}

::grpc::ClientReader< ::network::PDU>* NetworkExchange::Stub::RecvRaw(::grpc::ClientContext* context, const ::network::SYN& request) {
  return ::grpc::internal::ClientReaderFactory< ::network::PDU>::Create(channel_.get(), rpcmethod_Recv_, context, request);
}

void NetworkExchange::Stub::async::Recv(::grpc::ClientContext* context, const ::network::SYN* request, ::grpc::ClientReadReactor< ::network::PDU>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::network::PDU>::Create(stub_->channel_.get(), stub_->rpcmethod_Recv_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::network::PDU>* NetworkExchange::Stub::AsyncRecvRaw(::grpc::ClientContext* context, const ::network::SYN& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::network::PDU>::Create(channel_.get(), cq, rpcmethod_Recv_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::network::PDU>* NetworkExchange::Stub::PrepareAsyncRecvRaw(::grpc::ClientContext* context, const ::network::SYN& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::network::PDU>::Create(channel_.get(), cq, rpcmethod_Recv_, context, request, false, nullptr);
}

NetworkExchange::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkExchange_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< NetworkExchange::Service, ::network::PDU, ::network::FIN>(
          [](NetworkExchange::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::network::PDU>* reader,
             ::network::FIN* resp) {
               return service->Send(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkExchange_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< NetworkExchange::Service, ::network::SYN, ::network::PDU>(
          [](NetworkExchange::Service* service,
             ::grpc::ServerContext* ctx,
             const ::network::SYN* req,
             ::grpc::ServerWriter<::network::PDU>* writer) {
               return service->Recv(ctx, req, writer);
             }, this)));
}

NetworkExchange::Service::~Service() {
}

::grpc::Status NetworkExchange::Service::Send(::grpc::ServerContext* context, ::grpc::ServerReader< ::network::PDU>* reader, ::network::FIN* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetworkExchange::Service::Recv(::grpc::ServerContext* context, const ::network::SYN* request, ::grpc::ServerWriter< ::network::PDU>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace network

