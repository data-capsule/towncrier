// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2eproto;
namespace network {
class FIN;
struct FINDefaultTypeInternal;
extern FINDefaultTypeInternal _FIN_default_instance_;
class PDU;
struct PDUDefaultTypeInternal;
extern PDUDefaultTypeInternal _PDU_default_instance_;
class SYN;
struct SYNDefaultTypeInternal;
extern SYNDefaultTypeInternal _SYN_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::FIN* Arena::CreateMaybeMessage<::network::FIN>(Arena*);
template<> ::network::PDU* Arena::CreateMaybeMessage<::network::PDU>(Arena*);
template<> ::network::SYN* Arena::CreateMaybeMessage<::network::SYN>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class PDU final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.PDU) */ {
 public:
  inline PDU() : PDU(nullptr) {}
  ~PDU() override;
  explicit PROTOBUF_CONSTEXPR PDU(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PDU(const PDU& from);
  PDU(PDU&& from) noexcept
    : PDU() {
    *this = ::std::move(from);
  }

  inline PDU& operator=(const PDU& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDU& operator=(PDU&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PDU& default_instance() {
    return *internal_default_instance();
  }
  static inline const PDU* internal_default_instance() {
    return reinterpret_cast<const PDU*>(
               &_PDU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PDU& a, PDU& b) {
    a.Swap(&b);
  }
  inline void Swap(PDU* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDU* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PDU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PDU>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PDU& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PDU& from) {
    PDU::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDU* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.PDU";
  }
  protected:
  explicit PDU(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFwdNamesFieldNumber = 2,
    kMsgFieldNumber = 3,
    kSenderFieldNumber = 1,
  };
  // repeated string fwd_names = 2;
  int fwd_names_size() const;
  private:
  int _internal_fwd_names_size() const;
  public:
  void clear_fwd_names();
  const std::string& fwd_names(int index) const;
  std::string* mutable_fwd_names(int index);
  void set_fwd_names(int index, const std::string& value);
  void set_fwd_names(int index, std::string&& value);
  void set_fwd_names(int index, const char* value);
  void set_fwd_names(int index, const char* value, size_t size);
  std::string* add_fwd_names();
  void add_fwd_names(const std::string& value);
  void add_fwd_names(std::string&& value);
  void add_fwd_names(const char* value);
  void add_fwd_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fwd_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fwd_names();
  private:
  const std::string& _internal_fwd_names(int index) const;
  std::string* _internal_add_fwd_names();
  public:

  // repeated bytes msg = 3;
  int msg_size() const;
  private:
  int _internal_msg_size() const;
  public:
  void clear_msg();
  const std::string& msg(int index) const;
  std::string* mutable_msg(int index);
  void set_msg(int index, const std::string& value);
  void set_msg(int index, std::string&& value);
  void set_msg(int index, const char* value);
  void set_msg(int index, const void* value, size_t size);
  std::string* add_msg();
  void add_msg(const std::string& value);
  void add_msg(std::string&& value);
  void add_msg(const char* value);
  void add_msg(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msg();
  private:
  const std::string& _internal_msg(int index) const;
  std::string* _internal_add_msg();
  public:

  // string sender = 1;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // @@protoc_insertion_point(class_scope:network.PDU)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fwd_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class SYN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.SYN) */ {
 public:
  inline SYN() : SYN(nullptr) {}
  ~SYN() override;
  explicit PROTOBUF_CONSTEXPR SYN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SYN(const SYN& from);
  SYN(SYN&& from) noexcept
    : SYN() {
    *this = ::std::move(from);
  }

  inline SYN& operator=(const SYN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SYN& operator=(SYN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SYN& default_instance() {
    return *internal_default_instance();
  }
  static inline const SYN* internal_default_instance() {
    return reinterpret_cast<const SYN*>(
               &_SYN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SYN& a, SYN& b) {
    a.Swap(&b);
  }
  inline void Swap(SYN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SYN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SYN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SYN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SYN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SYN& from) {
    SYN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SYN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.SYN";
  }
  protected:
  explicit SYN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:network.SYN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class FIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.FIN) */ {
 public:
  inline FIN() : FIN(nullptr) {}
  ~FIN() override;
  explicit PROTOBUF_CONSTEXPR FIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FIN(const FIN& from);
  FIN(FIN&& from) noexcept
    : FIN() {
    *this = ::std::move(from);
  }

  inline FIN& operator=(const FIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline FIN& operator=(FIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const FIN* internal_default_instance() {
    return reinterpret_cast<const FIN*>(
               &_FIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FIN& a, FIN& b) {
    a.Swap(&b);
  }
  inline void Swap(FIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FIN& from) {
    FIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.FIN";
  }
  protected:
  explicit FIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicFieldNumber = 1,
  };
  // int64 magic = 1;
  void clear_magic();
  int64_t magic() const;
  void set_magic(int64_t value);
  private:
  int64_t _internal_magic() const;
  void _internal_set_magic(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.FIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t magic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PDU

// string sender = 1;
inline void PDU::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& PDU::sender() const {
  // @@protoc_insertion_point(field_get:network.PDU.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PDU::set_sender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.PDU.sender)
}
inline std::string* PDU::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:network.PDU.sender)
  return _s;
}
inline const std::string& PDU::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void PDU::_internal_set_sender(const std::string& value) {
  
  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* PDU::_internal_mutable_sender() {
  
  return _impl_.sender_.Mutable(GetArenaForAllocation());
}
inline std::string* PDU::release_sender() {
  // @@protoc_insertion_point(field_release:network.PDU.sender)
  return _impl_.sender_.Release();
}
inline void PDU::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  _impl_.sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.PDU.sender)
}

// repeated string fwd_names = 2;
inline int PDU::_internal_fwd_names_size() const {
  return _impl_.fwd_names_.size();
}
inline int PDU::fwd_names_size() const {
  return _internal_fwd_names_size();
}
inline void PDU::clear_fwd_names() {
  _impl_.fwd_names_.Clear();
}
inline std::string* PDU::add_fwd_names() {
  std::string* _s = _internal_add_fwd_names();
  // @@protoc_insertion_point(field_add_mutable:network.PDU.fwd_names)
  return _s;
}
inline const std::string& PDU::_internal_fwd_names(int index) const {
  return _impl_.fwd_names_.Get(index);
}
inline const std::string& PDU::fwd_names(int index) const {
  // @@protoc_insertion_point(field_get:network.PDU.fwd_names)
  return _internal_fwd_names(index);
}
inline std::string* PDU::mutable_fwd_names(int index) {
  // @@protoc_insertion_point(field_mutable:network.PDU.fwd_names)
  return _impl_.fwd_names_.Mutable(index);
}
inline void PDU::set_fwd_names(int index, const std::string& value) {
  _impl_.fwd_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:network.PDU.fwd_names)
}
inline void PDU::set_fwd_names(int index, std::string&& value) {
  _impl_.fwd_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:network.PDU.fwd_names)
}
inline void PDU::set_fwd_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.fwd_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.PDU.fwd_names)
}
inline void PDU::set_fwd_names(int index, const char* value, size_t size) {
  _impl_.fwd_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.PDU.fwd_names)
}
inline std::string* PDU::_internal_add_fwd_names() {
  return _impl_.fwd_names_.Add();
}
inline void PDU::add_fwd_names(const std::string& value) {
  _impl_.fwd_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.PDU.fwd_names)
}
inline void PDU::add_fwd_names(std::string&& value) {
  _impl_.fwd_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.PDU.fwd_names)
}
inline void PDU::add_fwd_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.fwd_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.PDU.fwd_names)
}
inline void PDU::add_fwd_names(const char* value, size_t size) {
  _impl_.fwd_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.PDU.fwd_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PDU::fwd_names() const {
  // @@protoc_insertion_point(field_list:network.PDU.fwd_names)
  return _impl_.fwd_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PDU::mutable_fwd_names() {
  // @@protoc_insertion_point(field_mutable_list:network.PDU.fwd_names)
  return &_impl_.fwd_names_;
}

// repeated bytes msg = 3;
inline int PDU::_internal_msg_size() const {
  return _impl_.msg_.size();
}
inline int PDU::msg_size() const {
  return _internal_msg_size();
}
inline void PDU::clear_msg() {
  _impl_.msg_.Clear();
}
inline std::string* PDU::add_msg() {
  std::string* _s = _internal_add_msg();
  // @@protoc_insertion_point(field_add_mutable:network.PDU.msg)
  return _s;
}
inline const std::string& PDU::_internal_msg(int index) const {
  return _impl_.msg_.Get(index);
}
inline const std::string& PDU::msg(int index) const {
  // @@protoc_insertion_point(field_get:network.PDU.msg)
  return _internal_msg(index);
}
inline std::string* PDU::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:network.PDU.msg)
  return _impl_.msg_.Mutable(index);
}
inline void PDU::set_msg(int index, const std::string& value) {
  _impl_.msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:network.PDU.msg)
}
inline void PDU::set_msg(int index, std::string&& value) {
  _impl_.msg_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:network.PDU.msg)
}
inline void PDU::set_msg(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.PDU.msg)
}
inline void PDU::set_msg(int index, const void* value, size_t size) {
  _impl_.msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.PDU.msg)
}
inline std::string* PDU::_internal_add_msg() {
  return _impl_.msg_.Add();
}
inline void PDU::add_msg(const std::string& value) {
  _impl_.msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.PDU.msg)
}
inline void PDU::add_msg(std::string&& value) {
  _impl_.msg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.PDU.msg)
}
inline void PDU::add_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.PDU.msg)
}
inline void PDU::add_msg(const void* value, size_t size) {
  _impl_.msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.PDU.msg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PDU::msg() const {
  // @@protoc_insertion_point(field_list:network.PDU.msg)
  return _impl_.msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PDU::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:network.PDU.msg)
  return &_impl_.msg_;
}

// -------------------------------------------------------------------

// SYN

// string name = 1;
inline void SYN::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SYN::name() const {
  // @@protoc_insertion_point(field_get:network.SYN.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SYN::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.SYN.name)
}
inline std::string* SYN::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.SYN.name)
  return _s;
}
inline const std::string& SYN::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SYN::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SYN::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SYN::release_name() {
  // @@protoc_insertion_point(field_release:network.SYN.name)
  return _impl_.name_.Release();
}
inline void SYN::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.SYN.name)
}

// -------------------------------------------------------------------

// FIN

// int64 magic = 1;
inline void FIN::clear_magic() {
  _impl_.magic_ = int64_t{0};
}
inline int64_t FIN::_internal_magic() const {
  return _impl_.magic_;
}
inline int64_t FIN::magic() const {
  // @@protoc_insertion_point(field_get:network.FIN.magic)
  return _internal_magic();
}
inline void FIN::_internal_set_magic(int64_t value) {
  
  _impl_.magic_ = value;
}
inline void FIN::set_magic(int64_t value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:network.FIN.magic)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_2eproto
