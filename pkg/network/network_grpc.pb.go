// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pkg/network/network.proto

package network

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkExchangeClient is the client API for NetworkExchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkExchangeClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (NetworkExchange_SendClient, error)
	Recv(ctx context.Context, in *SYN, opts ...grpc.CallOption) (NetworkExchange_RecvClient, error)
}

type networkExchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkExchangeClient(cc grpc.ClientConnInterface) NetworkExchangeClient {
	return &networkExchangeClient{cc}
}

func (c *networkExchangeClient) Send(ctx context.Context, opts ...grpc.CallOption) (NetworkExchange_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkExchange_ServiceDesc.Streams[0], "/network.NetworkExchange/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkExchangeSendClient{stream}
	return x, nil
}

type NetworkExchange_SendClient interface {
	Send(*PDU) error
	CloseAndRecv() (*FIN, error)
	grpc.ClientStream
}

type networkExchangeSendClient struct {
	grpc.ClientStream
}

func (x *networkExchangeSendClient) Send(m *PDU) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkExchangeSendClient) CloseAndRecv() (*FIN, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FIN)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkExchangeClient) Recv(ctx context.Context, in *SYN, opts ...grpc.CallOption) (NetworkExchange_RecvClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkExchange_ServiceDesc.Streams[1], "/network.NetworkExchange/Recv", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkExchangeRecvClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkExchange_RecvClient interface {
	Recv() (*PDU, error)
	grpc.ClientStream
}

type networkExchangeRecvClient struct {
	grpc.ClientStream
}

func (x *networkExchangeRecvClient) Recv() (*PDU, error) {
	m := new(PDU)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkExchangeServer is the server API for NetworkExchange service.
// All implementations must embed UnimplementedNetworkExchangeServer
// for forward compatibility
type NetworkExchangeServer interface {
	Send(NetworkExchange_SendServer) error
	Recv(*SYN, NetworkExchange_RecvServer) error
	mustEmbedUnimplementedNetworkExchangeServer()
}

// UnimplementedNetworkExchangeServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkExchangeServer struct {
}

func (UnimplementedNetworkExchangeServer) Send(NetworkExchange_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedNetworkExchangeServer) Recv(*SYN, NetworkExchange_RecvServer) error {
	return status.Errorf(codes.Unimplemented, "method Recv not implemented")
}
func (UnimplementedNetworkExchangeServer) mustEmbedUnimplementedNetworkExchangeServer() {}

// UnsafeNetworkExchangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkExchangeServer will
// result in compilation errors.
type UnsafeNetworkExchangeServer interface {
	mustEmbedUnimplementedNetworkExchangeServer()
}

func RegisterNetworkExchangeServer(s grpc.ServiceRegistrar, srv NetworkExchangeServer) {
	s.RegisterService(&NetworkExchange_ServiceDesc, srv)
}

func _NetworkExchange_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkExchangeServer).Send(&networkExchangeSendServer{stream})
}

type NetworkExchange_SendServer interface {
	SendAndClose(*FIN) error
	Recv() (*PDU, error)
	grpc.ServerStream
}

type networkExchangeSendServer struct {
	grpc.ServerStream
}

func (x *networkExchangeSendServer) SendAndClose(m *FIN) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkExchangeSendServer) Recv() (*PDU, error) {
	m := new(PDU)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NetworkExchange_Recv_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SYN)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkExchangeServer).Recv(m, &networkExchangeRecvServer{stream})
}

type NetworkExchange_RecvServer interface {
	Send(*PDU) error
	grpc.ServerStream
}

type networkExchangeRecvServer struct {
	grpc.ServerStream
}

func (x *networkExchangeRecvServer) Send(m *PDU) error {
	return x.ServerStream.SendMsg(m)
}

// NetworkExchange_ServiceDesc is the grpc.ServiceDesc for NetworkExchange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkExchange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.NetworkExchange",
	HandlerType: (*NetworkExchangeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _NetworkExchange_Send_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Recv",
			Handler:       _NetworkExchange_Recv_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/network/network.proto",
}
